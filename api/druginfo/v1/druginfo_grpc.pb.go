// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/druginfo/v1/druginfo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DruginfosClient is the client API for Druginfos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DruginfosClient interface {
	CreateDrug(ctx context.Context, in *CreateDrugRequest, opts ...grpc.CallOption) (*GetDrugReply, error)
	UpdateDrug(ctx context.Context, in *UpdatedruginfoRequest, opts ...grpc.CallOption) (*UpdatedruginfoReply, error)
	GetDrug(ctx context.Context, in *GetDrugRequest, opts ...grpc.CallOption) (*GetDrugReply, error)
	Listdruginfo(ctx context.Context, in *ListdruginfoRequest, opts ...grpc.CallOption) (*ListdruginfoReply, error)
}

type druginfosClient struct {
	cc grpc.ClientConnInterface
}

func NewDruginfosClient(cc grpc.ClientConnInterface) DruginfosClient {
	return &druginfosClient{cc}
}

func (c *druginfosClient) CreateDrug(ctx context.Context, in *CreateDrugRequest, opts ...grpc.CallOption) (*GetDrugReply, error) {
	out := new(GetDrugReply)
	err := c.cc.Invoke(ctx, "/druginfo.v1.Druginfos/CreateDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *druginfosClient) UpdateDrug(ctx context.Context, in *UpdatedruginfoRequest, opts ...grpc.CallOption) (*UpdatedruginfoReply, error) {
	out := new(UpdatedruginfoReply)
	err := c.cc.Invoke(ctx, "/druginfo.v1.Druginfos/UpdateDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *druginfosClient) GetDrug(ctx context.Context, in *GetDrugRequest, opts ...grpc.CallOption) (*GetDrugReply, error) {
	out := new(GetDrugReply)
	err := c.cc.Invoke(ctx, "/druginfo.v1.Druginfos/GetDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *druginfosClient) Listdruginfo(ctx context.Context, in *ListdruginfoRequest, opts ...grpc.CallOption) (*ListdruginfoReply, error) {
	out := new(ListdruginfoReply)
	err := c.cc.Invoke(ctx, "/druginfo.v1.Druginfos/Listdruginfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DruginfosServer is the server API for Druginfos service.
// All implementations must embed UnimplementedDruginfosServer
// for forward compatibility
type DruginfosServer interface {
	CreateDrug(context.Context, *CreateDrugRequest) (*GetDrugReply, error)
	UpdateDrug(context.Context, *UpdatedruginfoRequest) (*UpdatedruginfoReply, error)
	GetDrug(context.Context, *GetDrugRequest) (*GetDrugReply, error)
	Listdruginfo(context.Context, *ListdruginfoRequest) (*ListdruginfoReply, error)
	mustEmbedUnimplementedDruginfosServer()
}

// UnimplementedDruginfosServer must be embedded to have forward compatible implementations.
type UnimplementedDruginfosServer struct {
}

func (UnimplementedDruginfosServer) CreateDrug(context.Context, *CreateDrugRequest) (*GetDrugReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrug not implemented")
}
func (UnimplementedDruginfosServer) UpdateDrug(context.Context, *UpdatedruginfoRequest) (*UpdatedruginfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrug not implemented")
}
func (UnimplementedDruginfosServer) GetDrug(context.Context, *GetDrugRequest) (*GetDrugReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrug not implemented")
}
func (UnimplementedDruginfosServer) Listdruginfo(context.Context, *ListdruginfoRequest) (*ListdruginfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listdruginfo not implemented")
}
func (UnimplementedDruginfosServer) mustEmbedUnimplementedDruginfosServer() {}

// UnsafeDruginfosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DruginfosServer will
// result in compilation errors.
type UnsafeDruginfosServer interface {
	mustEmbedUnimplementedDruginfosServer()
}

func RegisterDruginfosServer(s grpc.ServiceRegistrar, srv DruginfosServer) {
	s.RegisterService(&Druginfos_ServiceDesc, srv)
}

func _Druginfos_CreateDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DruginfosServer).CreateDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/druginfo.v1.Druginfos/CreateDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DruginfosServer).CreateDrug(ctx, req.(*CreateDrugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Druginfos_UpdateDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedruginfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DruginfosServer).UpdateDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/druginfo.v1.Druginfos/UpdateDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DruginfosServer).UpdateDrug(ctx, req.(*UpdatedruginfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Druginfos_GetDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DruginfosServer).GetDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/druginfo.v1.Druginfos/GetDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DruginfosServer).GetDrug(ctx, req.(*GetDrugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Druginfos_Listdruginfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListdruginfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DruginfosServer).Listdruginfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/druginfo.v1.Druginfos/Listdruginfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DruginfosServer).Listdruginfo(ctx, req.(*ListdruginfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Druginfos_ServiceDesc is the grpc.ServiceDesc for Druginfos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Druginfos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "druginfo.v1.Druginfos",
	HandlerType: (*DruginfosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrug",
			Handler:    _Druginfos_CreateDrug_Handler,
		},
		{
			MethodName: "UpdateDrug",
			Handler:    _Druginfos_UpdateDrug_Handler,
		},
		{
			MethodName: "GetDrug",
			Handler:    _Druginfos_GetDrug_Handler,
		},
		{
			MethodName: "Listdruginfo",
			Handler:    _Druginfos_Listdruginfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/druginfo/v1/druginfo.proto",
}
