// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/druginfo/v1/druginfo.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Druginfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Druginfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Druginfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DruginfoMultiError, or nil
// if none found.
func (m *Druginfo) ValidateAll() error {
	return m.validate(true)
}

func (m *Druginfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CnName

	if len(errors) > 0 {
		return DruginfoMultiError(errors)
	}

	return nil
}

// DruginfoMultiError is an error wrapping multiple validation errors returned
// by Druginfo.ValidateAll() if the designated constraints aren't met.
type DruginfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DruginfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DruginfoMultiError) AllErrors() []error { return m }

// DruginfoValidationError is the validation error returned by
// Druginfo.Validate if the designated constraints aren't met.
type DruginfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DruginfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DruginfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DruginfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DruginfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DruginfoValidationError) ErrorName() string { return "DruginfoValidationError" }

// Error satisfies the builtin error interface
func (e DruginfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDruginfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DruginfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DruginfoValidationError{}

// Validate checks the field values on CreateDrugRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDrugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDrugRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDrugRequestMultiError, or nil if none found.
func (m *CreateDrugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDrugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CnName

	if len(errors) > 0 {
		return CreateDrugRequestMultiError(errors)
	}

	return nil
}

// CreateDrugRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDrugRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDrugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDrugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDrugRequestMultiError) AllErrors() []error { return m }

// CreateDrugRequestValidationError is the validation error returned by
// CreateDrugRequest.Validate if the designated constraints aren't met.
type CreateDrugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDrugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDrugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDrugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDrugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDrugRequestValidationError) ErrorName() string {
	return "CreateDrugRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDrugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDrugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDrugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDrugRequestValidationError{}

// Validate checks the field values on UpdatedruginfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatedruginfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatedruginfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatedruginfoRequestMultiError, or nil if none found.
func (m *UpdatedruginfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatedruginfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdatedruginfoRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDrugName()); l < 1 || l > 63 {
		err := UpdatedruginfoRequestValidationError{
			field:  "DrugName",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatedruginfoRequestMultiError(errors)
	}

	return nil
}

// UpdatedruginfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatedruginfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatedruginfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatedruginfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatedruginfoRequestMultiError) AllErrors() []error { return m }

// UpdatedruginfoRequestValidationError is the validation error returned by
// UpdatedruginfoRequest.Validate if the designated constraints aren't met.
type UpdatedruginfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatedruginfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatedruginfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatedruginfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatedruginfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatedruginfoRequestValidationError) ErrorName() string {
	return "UpdatedruginfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatedruginfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatedruginfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatedruginfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatedruginfoRequestValidationError{}

// Validate checks the field values on UpdatedruginfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatedruginfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatedruginfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatedruginfoReplyMultiError, or nil if none found.
func (m *UpdatedruginfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatedruginfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDruginfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatedruginfoReplyValidationError{
					field:  "Druginfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatedruginfoReplyValidationError{
					field:  "Druginfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDruginfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatedruginfoReplyValidationError{
				field:  "Druginfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatedruginfoReplyMultiError(errors)
	}

	return nil
}

// UpdatedruginfoReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatedruginfoReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatedruginfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatedruginfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatedruginfoReplyMultiError) AllErrors() []error { return m }

// UpdatedruginfoReplyValidationError is the validation error returned by
// UpdatedruginfoReply.Validate if the designated constraints aren't met.
type UpdatedruginfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatedruginfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatedruginfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatedruginfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatedruginfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatedruginfoReplyValidationError) ErrorName() string {
	return "UpdatedruginfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatedruginfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatedruginfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatedruginfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatedruginfoReplyValidationError{}

// Validate checks the field values on GetDrugRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDrugRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDrugRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDrugRequestMultiError,
// or nil if none found.
func (m *GetDrugRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDrugRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDrugRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDrugRequestMultiError(errors)
	}

	return nil
}

// GetDrugRequestMultiError is an error wrapping multiple validation errors
// returned by GetDrugRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDrugRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDrugRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDrugRequestMultiError) AllErrors() []error { return m }

// GetDrugRequestValidationError is the validation error returned by
// GetDrugRequest.Validate if the designated constraints aren't met.
type GetDrugRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrugRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrugRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrugRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrugRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrugRequestValidationError) ErrorName() string { return "GetDrugRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDrugRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrugRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrugRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrugRequestValidationError{}

// Validate checks the field values on GetDrugReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDrugReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDrugReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDrugReplyMultiError, or
// nil if none found.
func (m *GetDrugReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDrugReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDruginfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDrugReplyValidationError{
					field:  "Druginfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDrugReplyValidationError{
					field:  "Druginfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDruginfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDrugReplyValidationError{
				field:  "Druginfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return GetDrugReplyMultiError(errors)
	}

	return nil
}

// GetDrugReplyMultiError is an error wrapping multiple validation errors
// returned by GetDrugReply.ValidateAll() if the designated constraints aren't met.
type GetDrugReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDrugReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDrugReplyMultiError) AllErrors() []error { return m }

// GetDrugReplyValidationError is the validation error returned by
// GetDrugReply.Validate if the designated constraints aren't met.
type GetDrugReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDrugReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDrugReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDrugReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDrugReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDrugReplyValidationError) ErrorName() string { return "GetDrugReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDrugReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDrugReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDrugReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDrugReplyValidationError{}

// Validate checks the field values on ListdruginfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListdruginfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListdruginfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListdruginfoRequestMultiError, or nil if none found.
func (m *ListdruginfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListdruginfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListdruginfoRequestMultiError(errors)
	}

	return nil
}

// ListdruginfoRequestMultiError is an error wrapping multiple validation
// errors returned by ListdruginfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ListdruginfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListdruginfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListdruginfoRequestMultiError) AllErrors() []error { return m }

// ListdruginfoRequestValidationError is the validation error returned by
// ListdruginfoRequest.Validate if the designated constraints aren't met.
type ListdruginfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListdruginfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListdruginfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListdruginfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListdruginfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListdruginfoRequestValidationError) ErrorName() string {
	return "ListdruginfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListdruginfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListdruginfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListdruginfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListdruginfoRequestValidationError{}

// Validate checks the field values on ListdruginfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListdruginfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListdruginfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListdruginfoReplyMultiError, or nil if none found.
func (m *ListdruginfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListdruginfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListdruginfoReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListdruginfoReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListdruginfoReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ListdruginfoReplyMultiError(errors)
	}

	return nil
}

// ListdruginfoReplyMultiError is an error wrapping multiple validation errors
// returned by ListdruginfoReply.ValidateAll() if the designated constraints
// aren't met.
type ListdruginfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListdruginfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListdruginfoReplyMultiError) AllErrors() []error { return m }

// ListdruginfoReplyValidationError is the validation error returned by
// ListdruginfoReply.Validate if the designated constraints aren't met.
type ListdruginfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListdruginfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListdruginfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListdruginfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListdruginfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListdruginfoReplyValidationError) ErrorName() string {
	return "ListdruginfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListdruginfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListdruginfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListdruginfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListdruginfoReplyValidationError{}
